#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Check has been developed using an UPS Emerson/Liebert NX and General
# Electric NetPro 3000
#
# +------------------------------------------------------------------+
# | This file has been contributed by:                               |
# |                                                                  |
# | Václav Ovsík <vaclav.ovsik@gmail.com>             Copyright 2012 |
# +------------------------------------------------------------------+

# Example info:
#
#   [['2', '0', '81', '86', '5399', '1', '25']]
#
#   [['2', '0', '71', '100', '1222', '0', '22']]
#



def inventory_ups_battery(info):
    if len(info) > 0:
        return [ (None, {}) ]

def check_ups_battery(item, params, info):
    BatteryStatus, SecondsOnBattery, EstMinutesRemaining,\
        EstChargeRemaining, BatteryVoltage, BatteryCurrent,\
        BatteryTemperature = [ saveint(x) for x in info[0] ]

    state1 = 0
    infotxt1 = 'BatteryStatus: ' + \
                { 1:'unknown(1)', 2:'batteryNormal(2)',
                3:'batteryLow(3)', 4:'batteryDepleted(4)'}[BatteryStatus]
    if BatteryStatus != 2:
        state1 = 2
        infotxt1 += ' (!!)'

    return check_ups_merge_final(
            (state1, infotxt1, ()),
            check_ups_levels('batt_running_time', SecondsOnBattery, params),
            check_ups_levels('batt_time_left', EstMinutesRemaining, params),
            check_ups_levels('batt_charge_left', EstChargeRemaining, params),
            check_ups_levels('batt_volt', BatteryVoltage / 10.0, params),
            check_ups_levels('batt_curr', BatteryCurrent / 10.0, params),
            check_ups_levels('batt_temp', BatteryTemperature, params),
            )


check_info['ups_battery'] = (check_ups_battery, 'UPS Battery',
        1, inventory_ups_battery)
check_includes['ups_battery'] = [ 'ups.include' ]
check_default_levels['ups_battery'] = 'ups_default_levels'

snmp_info['ups_battery'] = ('.1.3.6.1.2.1.33.1.2', [
        '1.0',  # UPS-MIB::upsBatteryStatus.0
        '2.0',  # UPS-MIB::upsSecondsOnBattery.0
        '3.0',  # UPS-MIB::upsEstimatedMinutesRemaining.0
        '4.0',  # UPS-MIB::upsEstimatedChargeRemaining.0
        '5.0',  # UPS-MIB::upsBatteryVoltage.0
        '6.0',  # UPS-MIB::upsBatteryCurrent.0
        '7.0',  # UPS-MIB::upsBatteryTemperature.0
    ])

snmp_scan_functions['ups_battery'] = \
        lambda oid: oid('.1.3.6.1.2.1.33.1.2.1.0')
