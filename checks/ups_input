#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Check has been developed using an UPS Emerson/Liebert NX and General
# Electric NetPro 3000
#
# +------------------------------------------------------------------+
# | This file has been contributed by:                               |
# |                                                                  |
# | Václav Ovsík <vaclav.ovsik@gmail.com>             Copyright 2012 |
# +------------------------------------------------------------------+

# Example info:
#
#   [[['34', '3']],
#    [['499', '229', '219'], ['499', '231', '213'], ['499', '230', '217']]]
#
#   [[['72', '1']], [['500', '238', '17']]]
#


def inventory_ups_input_bads(info):
    if len(info[0]) == 0:
        return
    return [ (None, None) ]

def check_ups_input_bads(item, params, info):
    bads = saveint(info[0][0][0])
    return (0, 'OK - Input Line Bads #: %d' % bads)


def inventory_ups_input(info):
    if len(info[0]) == 0:
        return
    numl = saveint(info[0][0][1])
    inv = []
    if numl == 1:
        inv.append( ('L', {}) )
    else:
        for i in range(1, numl+1):
            inv.append( ('L%d' % i, {}) )
    return inv

def check_ups_input(item, params, info):
    ininfo, inlines = info
    num = saveint(item[1:])
    if item != 'L' + str(num) and item != 'L':
        return (3, 'UNKNOWN - Item not found')
    if num:
        num -= 1
    freq, volt, curr = [ saveint(x) for x in inlines[num] ]
    return check_ups_merge_final(
            check_ups_levels('input_volt', volt, params),
            check_ups_levels('input_curr', curr / 10.0, params),
            check_ups_levels('input_freq', freq / 10.0, params),
            )


check_info['ups_input.bads'] = {
    "check_function": check_ups_input_bads,
    "service_description": "UPS Input Bads",
    "has_perfdata": False,
    "inventory_function": inventory_ups_input_bads,
}
check_info['ups_input'] = {
    "check_function": check_ups_input,
    "service_description": "UPS Input %s",
    "has_perfdata": 1,
    "inventory_function": inventory_ups_input,
    "snmp_info": [
        ('.1.3.6.1.2.1.33.1.3', [
            '1.0',  # UPS-MIB::upsInputLineBads.0
            '2.0',  # UPS-MIB::upsInputNumLines.0
        ]),
        ('.1.3.6.1.2.1.33.1.3.3.1', [
            '2',  # UPS-MIB::upsInputFrequency
            '3',  # UPS-MIB::upsInputVoltage
            '4',  # UPS-MIB::upsInputCurrent
        ]),
    ],
    "snmp_scan_function": lambda oid: oid('.1.3.6.1.2.1.33.1.5.1.0') in ['.1.3.6.1.4.1.3808.1.1.1'],
}
check_includes['ups_input'] = [ 'ups.include' ]
check_default_levels['ups_input'] = 'ups_default_levels'

